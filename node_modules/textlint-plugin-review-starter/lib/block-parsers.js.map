{"version":3,"sources":["../src/block-parsers.js"],"names":["BlockParsers","table","withCaption","parseTable","footnote","parseFootnote","quote","parseQuote","bibpaper","parseCodeBlock","list","listnum","emlist","emlistnum","source","cmd","texequation","comment","parseCommentBlock","image","parseImage","indepimage","numberlessimage","graph","imgtable","lead","parseLead","read","note","parseShortColumn","memo","tip","info","warning","important","caution","notice","embed","parseRawBlock","raw","blankline","parseOperator","noindent","tsize","chapterauthor","output","program","sideimage","terminal","desc","desclist","talk","talklist","centering","clearpage","flushright","makechaptitlepage","needvspace","paragraphend","sampleoutputbegin","sampleoutputend","vspace","captionIndex","blockParser","block","node","blockArg","args","caption","parseBlockArg","Syntax","Caption","chunk","lines","children","unshift","text","Str","value","Table","slice","length","forEach","line","Array","prototype","push","apply","parseTableContent","isComment","match","nodes","cellRegex","exec","startColumn","index","cellContent","startsWith","substr","context","cellNode","TableCell","Footnote","footnoteParagraph","Paragraph","parseBlockWithContent","Raw","Quote","Comment","CodeBlock","filter","map","join","Image","Lead","ShortColumn","type","flushParagraph","paragraph","argText","blockArgContext","argNode","supportedBlockCommands","Object","keys"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n'use strict';\nimport { Syntax } from './mapping';\nimport { parseText, parseLine } from './inline-parsers';\nimport {\n  createNodeFromChunk, createNodeFromLinesInChunk, createCommentNodeFromLine, createInlineNode,\n  contextFromLine, contextNeedsUnescapeBrackets\n} from './parser-utils';\n\nexport const BlockParsers = {\n  table: withCaption(1, parseTable),\n  footnote: parseFootnote,\n  quote: parseQuote,\n\n  bibpaper: withCaption(1, parseCodeBlock),\n  list: withCaption(1, parseCodeBlock),\n  listnum: withCaption(1, parseCodeBlock),\n  emlist: withCaption(0, parseCodeBlock),\n  emlistnum: withCaption(0, parseCodeBlock),\n  source: parseCodeBlock,\n  cmd: parseCodeBlock,\n  texequation: parseCodeBlock,\n\n  comment: parseCommentBlock,\n\n  image: withCaption(1, parseImage),\n  indepimage: withCaption(1, parseImage),\n  numberlessimage: withCaption(1, parseImage),\n  graph: withCaption(2, parseImage),\n  imgtable: withCaption(1, parseImage),\n\n  lead: parseLead,\n  read: parseLead,\n\n  note: withCaption(0, parseShortColumn),\n  memo: withCaption(0, parseShortColumn),\n  tip: withCaption(0, parseShortColumn),\n  info: withCaption(0, parseShortColumn),\n  warning: withCaption(0, parseShortColumn),\n  important: withCaption(0, parseShortColumn),\n  caution: withCaption(0, parseShortColumn),\n  notice: withCaption(0, parseShortColumn),\n\n  embed: parseRawBlock,\n  raw: parseRawBlock,\n\n  // operator\n  blankline: parseOperator(\"\\n\"),\n  noindent: parseOperator(null),\n  tsize: parseOperator(null),\n\n  // ---------- Starter ----------\n  abstract: parseLead,\n  chapterauthor: parseLead,\n  output: withCaption(1, parseCodeBlock),\n  program: withCaption(1, parseCodeBlock),\n  sideimage: withCaption(null, parseImage),\n  terminal: parseCodeBlock,\n  desc: withCaption(0, parseCodeBlock),\n  desclist: parseCodeBlock,\n  talk: withCaption(1, parseCodeBlock),\n  talklist: parseCodeBlock,\n\n  // operator\n  centering: parseOperator(null),\n  clearpage: parseOperator(null),\n  flushright: parseOperator(null),\n  makechaptitlepage: parseOperator(null),\n  needvspace: parseOperator(null),\n  paragraphend: parseOperator(null),\n  sampleoutputbegin: parseOperator(null),\n  sampleoutputend: parseOperator(null),\n  vspace: parseOperator(null),\n};\n\n/**\n * return new parser to parse block with caption.\n * @param {number} captionIndex - index of caption in block args\n * @param {function} blockParser - Parser function of a block\n * @return {function} parser function\n */\nfunction withCaption(captionIndex, blockParser) {\n  return function (block) {\n    const node = blockParser(block);\n\n    if (captionIndex !== null) {\n      const blockArg = block.args[captionIndex];\n      if (blockArg) {\n        const caption = parseBlockArg(Syntax.Caption, blockArg, block.chunk.lines[0]);\n        if (caption) {\n          node.children = node.children || [];\n          node.children.unshift(caption);\n        }\n      }\n    }\n\n    return node;\n  };\n}\n\n/**\n * parse operator\n * @param {Block} block - Block to parse\n * @param {string} text - substitute text\n * @return {TxtNode}\n */\nfunction parseOperator(text) {\n  if( text == null ) {\n    return null\n  }\n  return function (block) {\n    const node = createNodeFromChunk(block.chunk, Syntax.Str);\n    node.value = text;\n    return node;\n  };\n}\n\n/**\n * parse table block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Table node\n */\nfunction parseTable(block) {\n  const node = createNodeFromChunk(block.chunk, Syntax.Table);\n  node.children = [];\n\n  block.chunk.lines.slice(1, block.chunk.lines.length - 1).forEach(line => {\n    Array.prototype.push.apply(node.children, parseTableContent(line));\n  });\n\n  return node;\n}\n\n/**\n * parse line in a table.\n * @param {Line} line - Line to parse\n * @return {[TxtNode]} ListItem nodes in the line\n */\nfunction parseTableContent(line) {\n  if (line.isComment) {\n    return [createCommentNodeFromLine(line)];\n  }\n\n  if (line.text.match(/^-+$/)) {\n    return [];  // Ignore horizontal line\n  }\n\n  const nodes = [];\n  const cellRegex = /[^\\t]+/g;\n  var match;\n  while (match = cellRegex.exec(line.text)) {\n    let startColumn = match.index;\n    let cellContent = match[0];\n    if (cellContent.startsWith('.')) {\n      cellContent = cellContent.substr(1);\n      startColumn += 1;\n    }\n\n    if (cellContent === '') {\n      continue;\n    }\n\n    const context = contextFromLine(line, startColumn);\n    const cellNode = createInlineNode(Syntax.TableCell, cellContent, context);\n    cellNode.children = parseText(cellContent, context);\n    nodes.push(cellNode);\n  }\n\n  return nodes;\n}\n\n/**\n * parse footnote block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Footnote node\n */\nfunction parseFootnote(block) {\n  const node = createNodeFromChunk(block.chunk, Syntax.Footnote);\n  const footnoteParagraph = parseBlockArg(Syntax.Paragraph, block.args[1], block.chunk.lines[0]);\n  if (footnoteParagraph) {\n    node.children = [footnoteParagraph];\n  }\n\n  return node;\n}\n\n/**\n * parse raw block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Raw node\n */\n function parseRawBlock(block) {\n  return parseBlockWithContent(block, Syntax.Raw);\n}\n\n/**\n * parse quote block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} BlockQuote node\n */\nfunction parseQuote(block) {\n  return parseBlockWithContent(block, Syntax.Quote);\n}\n\n/**\n * parse comment block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Comment node\n */\n function parseCommentBlock(block) {\n  return parseBlockWithContent(block, Syntax.Comment);\n}\n\n/**\n * parse code block, e.g //list, //emlist, //source etc.\n * @param {Block} block - Block to parse\n * @return {TxtNode} CodeBlock node\n */\nfunction parseCodeBlock(block) {\n  const node = createNodeFromChunk(block.chunk, Syntax.CodeBlock);\n  node.value = block.chunk.lines\n    .slice(1, block.chunk.lines.length - 1)\n    .filter(line => !line.isComment)\n    .map(line => line.raw)\n    .join('');\n  return node;\n}\n\n/**\n * parse image block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Image node\n */\nfunction parseImage(block) {\n  return createNodeFromChunk(block.chunk, Syntax.Image);\n}\n\n/**\n * parse lead block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Block node\n */\nfunction parseLead(block) {\n  return parseBlockWithContent(block, Syntax.Lead);\n}\n\n/**\n * parse various short column block.\n * @param {Block} block - Block to parse\n * @return {TxtNode} Block node\n */\nfunction parseShortColumn(block) {\n  return parseBlockWithContent(block, Syntax.ShortColumn);\n}\n\n/**\n * parse a block with content. which is parsed as paragraphs.\n * @param {Block} block - line to parse\n * @param {string} type - Type of node\n * @return {[TxtNode]} TxtNode\n */\nexport function parseBlockWithContent(block, type) {\n  const chunk = block.chunk;\n  const node = createNodeFromChunk(chunk, type);\n  node.children = [];\n\n  let lines = [];\n  const flushParagraph = function () {\n    if (lines.length > 0) {\n      const paragraph = createNodeFromLinesInChunk(Syntax.Paragraph, lines, chunk);\n      paragraph.children = [];\n      lines.forEach(line => {\n        Array.prototype.push.apply(paragraph.children, parseLine(line));\n      });\n      node.children.push(paragraph);\n    }\n\n    lines = [];\n  };\n\n  chunk.lines.slice(1, chunk.lines.length - 1).forEach(line => {\n    if (line.text === '') {\n      flushParagraph();\n    } else {\n      lines.push(line);\n    }\n  });\n\n  flushParagraph();\n\n  return node;\n}\n\n/**\n * parse single argument of a block as a TxtNode\n * @param {string} type - Type of node\n * @param {Arg} blockArg - Arg of a block to parse\n * @param {Line} line - line where Arg exists\n * @return {TxtNode}\n */\nexport function parseBlockArg(type, blockArg, line) {\n  const argText = blockArg.value;\n  if (!argText) {\n    return null;\n  }\n\n  const startColumn = blockArg.startColumn;\n  const blockArgContext = contextNeedsUnescapeBrackets(contextFromLine(line, startColumn));\n  const argNode = createInlineNode(type, argText, blockArgContext);\n  argNode.children = parseText(argText, blockArgContext);\n  return argNode;\n}\n\nexport function supportedBlockCommands() {\n  return Object.keys(BlockParsers)\n}\n"],"file":"block-parsers.js"}